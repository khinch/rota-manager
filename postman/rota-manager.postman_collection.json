{
	"info": {
		"_postman_id": "f9fae990-71be-45fe-8d55-b913ff0a3f69",
		"name": "rota-manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46962547",
		"_collection_link": "https://kieren-31a841a7-839654.postman.co/workspace/kieren-31a841a7's-Workspace~ca555c18-bc63-4d68-8955-27bded11bf10/collection/46962547-f9fae990-71be-45fe-8d55-b913ff0a3f69?action=share&source=collection_link&creator=46962547"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Signup",
					"item": [
						{
							"name": "POST Signup - Success - Lower Password Boundary",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);",
											"console.log(`Email: ${email}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Success - Upper Password Boundary",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Duplicate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('User already exists');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `email` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `password` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No 2FA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `requires2FA` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Invalid Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Invalid email address. For more details, see the spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar.com\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Short Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Password too short. Should be 8 to 128 characters.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"1234567\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Long Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Password too long. Should be 8 to 128 characters.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "POST Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let setCookieHeader = pm.response.headers.get(\"Set-Cookie\");",
											"let token = setCookieHeader.split(\" \")[0].split(\"=\")[1].replace(\";\", \"\");",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Invalid email address. For more details, see the spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar.com\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Password too short. Should be 8 to 128 characters.');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foo@bar.com\",\n    \"password\": \"passwor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Non-existent User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Incorrect credentials');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"nonexistent@user.com\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Wrong Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Incorrect credentials');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"passworb\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Token",
					"item": [
						{
							"name": "POST Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_token_path}}",
									"host": [
										"{{host}}{{verify_token_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Malformed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"boken\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_token_path}}",
									"host": [
										"{{host}}{{verify_token_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"let us in mate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_token_path}}",
									"host": [
										"{{host}}{{verify_token_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "POST Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}{{logout_path}}",
									"host": [
										"{{host}}{{logout_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Logout - Banned Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid token');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}{{logout_path}}",
									"host": [
										"{{host}}{{logout_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Banned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid token');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_token_path}}",
									"host": [
										"{{host}}{{verify_token_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "POST Signup - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);",
											"console.log(`Email: ${email}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let setCookieHeader = pm.response.headers.get(\"Set-Cookie\");",
											"let token = setCookieHeader.split(\" \")[0].split(\"=\")[1].replace(\";\", \"\");",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(`User deleted: ${pm.environment.get(\"random_email\")}`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}{{delete_user_path}}",
									"host": [
										"{{host}}{{delete_user_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - banned token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(`Invalid token`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}{{delete_user_path}}",
									"host": [
										"{{host}}{{delete_user_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Banned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(`Invalid token`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_token_path}}",
									"host": [
										"{{host}}{{verify_token_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - no token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const jar = pm.cookies.jar();",
											"",
											"jar.unset(host, 'jwt', function (error) {",
											"  if (error) {",
											"    console.error(error);",
											"  }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(`Missing token`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{delete_user_path}}",
									"host": [
										"{{host}}{{delete_user_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2FA",
					"item": [
						{
							"name": "POST Signup - Success - 2FA Enabled",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - 2FA Challenge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 206\", function () {",
											"    pm.response.to.have.status(206);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response message is correct\", function () {    ",
											"    pm.expect(jsonData.message).to.eql('2FA required');",
											"    pm.expect(jsonData.loginAttemptId).to.not.be.null;",
											"});",
											"",
											"pm.environment.set(\"2fa_loginAttemptId\", jsonData.loginAttemptId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postmark - Get Sent Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const totalCount = jsonData.TotalCount;",
											"",
											"const maxRetries = 10;",
											"const retryDelay = 3000;",
											"const currentTry = parseInt(pm.environment.get(\"retries\") || \"1\", 10);",
											"",
											"if (totalCount < 1) {",
											"    pm.environment.set(\"retries\", (currentTry + 1).toString());",
											"    console.log(`No code after ${currentTry} attempts. Retrying...`);",
											"    setTimeout(function() {}, retryDelay); ",
											"    pm.execution.setNextRequest(pm.info.requestName);",
											"} else {",
											"    pm.environment.unset(\"retries\");",
											"    pm.environment.set(\"2fa_messageId\", jsonData.Messages[0].MessageID);",
											"    pm.execution.setNextRequest(\"Postmark - Get Sent Message\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Postmark-Server-Token",
										"value": "{{postmark_server_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.postmarkapp.com/messages/outbound?offset=0&count=500&recipient={{random_email}}",
									"protocol": "https",
									"host": [
										"api",
										"postmarkapp",
										"com"
									],
									"path": [
										"messages",
										"outbound"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "count",
											"value": "500"
										},
										{
											"key": "fromemail",
											"value": "lgr2fa@testwebsitepleaseignore.uk",
											"disabled": true
										},
										{
											"key": "recipient",
											"value": "{{random_email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Postmark - Get Sent Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const twoFaCode = jsonData.TextBody;",
											"// console.log(`twoFaCode: ${twoFaCode}`);",
											"pm.environment.set(\"2fa_code\", twoFaCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Give postmark a chance to catch-up - sometimes the message call fails even when the list was returned",
											"async function sleep(ms) {",
											"  return new Promise(resolve => setTimeout(resolve, ms));",
											"}",
											"await sleep(4000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Postmark-Server-Token",
										"value": "{{postmark_server_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.postmarkapp.com/messages/outbound/{{2fa_messageId}}/details",
									"protocol": "https",
									"host": [
										"api",
										"postmarkapp",
										"com"
									],
									"path": [
										"messages",
										"outbound",
										"{{2fa_messageId}}",
										"details"
									],
									"query": [
										{
											"key": "fromemail",
											"value": "lgr2fa@testwebsitepleaseignore.uk",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"loginAttemptId\": \"{{2fa_loginAttemptId}}\",\n    \"2FACode\": \"{{2fa_code}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{verify_2fa_path}}",
									"host": [
										"{{host}}{{verify_2fa_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}{{logout_path}}",
									"host": [
										"{{host}}{{logout_path}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "projects",
			"item": [
				{
					"name": "New Project",
					"item": [
						{
							"name": "POST New Project - Banned Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid token');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"foo\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);",
											"console.log(`Email: ${email}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{signup_path}}",
									"host": [
										"{{host}}{{signup_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let setCookieHeader = pm.response.headers.get(\"Set-Cookie\");",
											"let token = setCookieHeader.split(\" \")[0].split(\"=\")[1].replace(\";\", \"\");",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST New Project 1 - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"function isUUID(str) {",
											"    return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(str);",
											"}",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql('a');",
											"    pm.expect(isUUID(jsonData.id)).to.be.true;",
											"    pm.environment.set(\"project_1_uuid\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST New Project 2 - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"function isUUID(str) {",
											"    return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(str);",
											"}",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql('012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234');",
											"    pm.expect(isUUID(jsonData.id)).to.be.true;",
											"    pm.environment.set(\"project_2_uuid\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST New Project - too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Project name cannot be empty');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST New Project - too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Validation error: Max name length is 255 characters');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}{{logout_path}}",
									"host": [
										"{{host}}{{logout_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST New Project - unauthorised",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid token');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"foo\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{new_project_path}}",
									"host": [
										"{{host}}{{new_project_path}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Project List",
					"item": [
						{
							"name": "GET Project List - Unauthorised",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid token');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{project_list_path}}",
									"host": [
										"{{host}}{{project_list_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let setCookieHeader = pm.response.headers.get(\"Set-Cookie\");",
											"let token = setCookieHeader.split(\" \")[0].split(\"=\")[1].replace(\";\", \"\");",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{login_path}}",
									"host": [
										"{{host}}{{login_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Project List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project names match expected\", function () {",
											"    const response = pm.response.json();",
											"    const id_one = pm.environment.get(\"project_1_uuid\");",
											"    const id_two = pm.environment.get(\"project_2_uuid\");",
											"    pm.expect(response.projects.find(p => p.id === id_one).name).to.eql('a');",
											"    pm.expect(response.projects.find(p => p.id === id_two).name).to.eql('012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{project_list_path}}",
									"host": [
										"{{host}}{{project_list_path}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}